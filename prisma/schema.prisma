// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  username       String         @unique
  email          String         @unique
  password       String
  name           String?
  industry       String?
  isVerified     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userResetToken PasswordResetToken[]
  otp            Otp[]
  Channels       Channel[]
  Posts          Post[]
  WorkSpaces     UserWorkSpace[]
}

model WorkSpace {
  id              String         @id @default(cuid())
  name            String
  timeZone        String
  timeZoneOffset  String?
  startDay        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Users           UserWorkSpace[]

  Post Post[]

  Channel Channel[]
}

model UserWorkSpace {
  id          String   @id @default(cuid())
  userId      String
  workSpaceId String
  role        Role
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workSpaceId])
  @@index([userId])
  @@index([workSpaceId])
}

enum Role {
  CREATOR
  ADMIN
  MEMBER
}


model PasswordResetToken {
  id   String @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Otp {
  id   String @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}



model Channel {
  id         String    @id @default(cuid())
  name       String
  authToken  String
  userId     String
  workSpaceId String
  workSpace  WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts      PostChannel[]
  @@unique([name, userId, workSpaceId])
}

model Post {
  id          String       @id @default(cuid())
  content     String       @db.LongText
  // media       Json
  mediaUrl    String?
  mediaName    String?
  mediaType    String?
  status      PostStatus
  scheduledAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    
  userId      String
  workSpaceId String
  workSpace   WorkSpace    @relation(fields: [workSpaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channels    PostChannel[]
}

model PostChannel {
  postId     String
  channelId  String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, channelId]) // Composite primary key
}

// model PostChannel {
//   id         Int       @id @default(autoincrement())
//   postId     Int
//   channelId  Int
//   status     PostStatus
//   post       Post      @relation(fields: [postId], references: [id])
//   channel    Channel   @relation(fields: [channelId], references: [id])
// }

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  ALL
  IDEA
}


